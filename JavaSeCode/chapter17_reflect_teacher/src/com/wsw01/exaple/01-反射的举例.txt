通过使用反射前后的例子对比，回答：

1. 面向对象创建对象，调用指定结构（属性、方法）等功能，可以不使用反射，也可以使用
    反射。请问有什么区别？
答：
    > 不使用反射：我们需要考虑封装性。比如，出了Person类之后，就不能调用
        Person类中私有的结构。
    > 使用反射：我们可以调用运行时类中任意的构造器、属性和方法。包括了私有
        的构造器、属性和方法。

2. 以前创建对象并调用方法的方式，与现在通过反射创建对象并调用方法的方式对比的话，
    哪种用的多？场景是什么？
答：
    > 从我们作为程序员开发者的角度来讲，我们开发中主要是完成业务代码，对于相关
        的对象、方法的调用都是确定的。所以我们使用非反射的方式多一些。
    > 因为反射体现了动态性，（可以在运行时动态的获取对象所属的类，动态的调用
        相关的方法），所以我们在设计框架的时候，会大量地使用反射。意味着，如
        果大家需要学习框架源码，那么就需要学习反射。

    框架 = 注解 + 反射 + 设计模式

3. 单例模式的饿汉式和懒汉式中，私有化类的构造器了！此时通过反射，可以创建单例模式中
    类的多个对象吗？
答：是的！

4. 通过反射，可以调用类中私有的结构，是否与面向对象的封装性有冲突？是不是Java
    语言设计存在Bug？
答：不存在Bug！
封装性：体现的是是否建议我们调用内部API的问题。比如，private声明的结构，意味着
    不建议使用。
反射：体现的是我们能否调用的问题。因为类的完整结构都加载到了内存中，所以我们
    有能力进行调用。
自己的思考：
我觉得主要是看使用场景，比如有了封装性，业务逻辑可以更清晰，代码耦合度越低。
但有了反射，我们可以更灵活地去针对业务场景进行操作。就是我可以不用，但你不能
没有。