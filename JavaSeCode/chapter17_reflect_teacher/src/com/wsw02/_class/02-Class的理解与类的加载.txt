
1. Class类的理解（掌握）
    （如下以Java类的加载为例说明）
    首先，我们针对编写好的.java源文件进行编译（使用javac.exe命令），就会生成一个
    或多个.class字节码文件。接着，我们使用java.exe命令对指定的.class文件进行解释
    运行。然后，在这个过程中，我们需要将.class字节码文件加载（使用类的加载器）到内
    存中（存放在方法区），最后，加载到内存中的.class文件对应的结构即为Class的一个实
    例。

    比如说：加载到内存中的Person类或String类或User类，都作为Class的一个一个的实例。

    Class clazz2 = User.class; // 运行时类
    Class clazz3 = String.class;
    Class clazz4 = Comparable.class;
    Class clazz1 = Person.class;
    注意：此时Person.class就不是一个字节码文件了，它加载到内存中，就是一个完整的
    结构了（类模板对象）。

    说明：运行时类在内存中会缓存起来，在整个执行期间，只会加载一次。（不严谨）
        准确来说，同一个类的加载器只能加载一次，不同类的加载器，可以加载多次。

2. 体会：Class看做是反射的源头

3. 获取Class实例的几种方式（掌握前三种）
1）调用运行时类的静态属性：
    Class clazz = Person.class;
2）调用运行时类的对象的getClass()方法：
    Person person = new Person();
    Class clazz = person.getClass();
3）调用Class的静态方法forName(String className)：使用场景更多，适合动态性
    String className = "com.wsw02._class.Person"; // 类的全类名
    Class clazz = Class.forName(className);
4）调用类加载器的方式：
    Class clazz = ClassLoader.getSystemClassLoader().loadClass(className);
代码见：com.wsw02._class.ClassTest.test1;

4. Class的实例都可以指向哪些结构呢？（熟悉）
简而言之，所有Java类型
1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类
2）interface：接口
3）[]：数组
4）enum：枚举
5）annotation：注解@interface
6）primitive type：基本数据类型
7）void

代码见：com.wsw02._class.ClassTest.test2

5. 类的加载过程（了解）
过程1：装载（loading）
    将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类的加载器完成。

过程2：链接（linking）
    > 验证（Verify）：确保加载类的信息符合JVM规范。例如：以cafe babe开头，没有安全
        方面的问题。
    > 准备（Prepare）：正式为类变量（static）分配内存并设置类变量默认初始值的阶段
        ，这些内存都将在方法区中进行分配。
    > 解析（Resolve）：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。
过程3：初始化（initialization)
    > 执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动
        收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器
        是构造类信息的，不是构造该类对象的构造器）
    > 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的
        初始化。
    > 虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。

5. 关于类的加载器（了解、JDK8版本为例）
5.1 作用：负责类的加载，并对应于一个Class的实例。
5.2 分类（分为两种）
    > BootstrapClassLoader：引导类加载器、启动类加载器
        >> 使用C/C++语言编写的，不能通过Java代码获取其实例。
        >> 负责加载Java的核心库（JAVA_HOME/jre/lib/rt.jar
            或sun.boot.class.path路径下的内容）
    > 继承于ClassLoader的类加载器
        > ExtensionClassLoader：扩展类加载器
        > SystemClassLoader/ApplicationClassLoader：系统类加载器/应用程序类加载器
            >> 我们自定义的类，默认使用的类的加载器
        > 用户自定义加载器


5.3 以上的类的加载器是否存在继承关系？ NO！
class ClassLoader {
    ClassLoader parent;

    public ClassLoader(ClassLoader parent) {
        this.parent = parent;
    }
}

// 测试代码
ClassLoader loader0 = new ClassLoader();
ClassLoader loader1 = new ClassLoader(loader0);
我们就把loader0叫做loader1的父类加载器