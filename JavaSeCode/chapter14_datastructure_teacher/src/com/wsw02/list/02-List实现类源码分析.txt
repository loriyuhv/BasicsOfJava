一、ArrayList
1. ArrayList的特点

2. ArrayList源码分析
2.1 jdk7版本：（以jdk1.7.0_07为例）
// 如下代码的执行：底层会初始化数组，数组的长度为10。
// Object[] elementData = new Object[10];
ArrayList<String> list = new ArrayList<>();

list.add("Jerry"); // elementObject[0] = "Jerry";
list.add("Tom");    // elementObject[1] = "Tom";
...
当要添加第11个元素的时候，底层的elementData数组已满，
则需要扩容。默认扩容为原来长度的1.5倍数。并将原有数组中的元素复制到新的数组中。

...

2.2 jdk8版本：（以jdk1.8为例）
// 如下代码的执行：底层会初始化数组，数组的长度为0。
// Object[] elementData = new Object[]{};
ArrayList<String> list = new ArrayList<>();

list.add("Jerry"); // 首次添加元素时，会初始化数组elementData = new Object[10]; elementData[0]="Jerry";
list.add("Tom");    // elementObject[1] = "Tom";
...
当要添加第11个元素的时候，底层的elementData数组已满，
则需要扩容。默认扩容为原来长度的1.5倍数。并将原有数组中的元素复制到新的数组中。

...

小结：
jdk1.7.0_07版本中：ArrayList类似于饿汉式
jdk1.8.0_271版本中，ArrayList类似于懒汉式

3. LinkedList是否存在扩容问题？
No！

四、启示与开发建议
1.
    Vector基本不用了。
2.
    > ArrayList底层使用数据结构；
        >> 查找和添加（尾部添加）操作效率高，时间复杂度为O(1)；
        >> 删除和插入操作效率低，时间复杂度为O(n)；
    > LinkedList底层使用双向链表结构：
        >> 删除和插入操作效率高，时间复杂度为O(1);
        >> 查找和添加（尾部添加）操作效率低，时间复杂度为O(n)（有可能添加操作是O(1)）
3.
    在选择了ArrayList的前提下：
        > new ArrayList(); 底层创建长度为10的数组。
        > new ArrayList(int capacity); 底层创建指定capacity长度的数组。
    如果开发中，大体确定数组的长度推，则荐使用ArrayList(int capacity)这个构造器，避免了底层的扩容、复制数组的操作。

