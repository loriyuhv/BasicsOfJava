1.
    经典的设计模式一共有23种。

2. 何为单例模式？

3. 如何实现单例模式？
    > 饿汉式
        class Bank {
            // 1. 类的构造器私有化
            private Bank() {}

            // 2. 在类内部创建当前类的实例
            // 4. 此属性也必须声明为static属性
            private static Bank instance = new Bank();

            // 3. 通过getXxx()方法获取当前类对象的实例，必须声明为static方法
            public static Bank getInstance() {
                return instance;
            }
        }
    > 懒汉式
        class Girlfriend {
            // 1. 类的构造器私有化
            private Girlfriend() {}

            // 2. 在类内部声明当前类的实例
            // 4. 此属性也必须声明为static属性
            private static Girlfriend instance = null;

            // 3. 通过getXxx()方法获取当前对象实例，如果实例为null，则创建实例，也必须定义为static方法
            public static Girlfriend getInstance() {
                if (instance == null) {
                    instance = new Girlfriend();
                }

                return instance;
            }
        }

4. 对比两种模式（特点、优缺点）
    特点：
        > 饿汉式：“立即加载”，随着类的加载，当前的唯一实例就创建了。
        > 懒汉式：“延迟加载”，在需要使用的时候，进行创建。

    优缺点：
        > 饿汉式：
            > 优点：写法简单；由于内存较早加载，使用更方便、更快；是线程安全的。
            > 缺点：内存中占用时间较长。
        > 懒汉式：
            > 优点：在需要的时候进行创建，节省内存空间。
            > 缺点：非线程安全的。
